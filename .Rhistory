test <- data_2 %>% filter(sample==FALSE)
#verifying the dimensions
dim(test) #test set
dim(train) #train set
model <- lm(charges~.,train)
predict_train <- predict(model,train)
predict_test <- predict(model,test)
# RMSE
RMSE(predict_test,test$charges)
# MAPE
MAPE(predict_test,test$charges)
summary(data_2$charges)
model %>% ggplot(aes(residuals))+geom_density()
hist(model$residuals)
data_2 <- data_2 %>% select(!children)
data_0 %>% ggplot(aes(children))+geom_histogram(aes(fill=region),position = "dodge")
data_2 %>% ggplot(aes(charges))+geom_boxplot(aes(fill=region))
data_2 %>% ggplot(aes(smoker))+geom_bar(aes(fill=region),position = "dodge")+facet_wrap(~sex)
# getting the indexes of all numerical columns
num_idx <- which(!grepl("factor|character",sapply(data_2,class)))
M <- cor(data_2[num_idx])
corrplot(M,method = "num",type = "lower")
sample <- sample.split(data_2$charges,.7)
train <- data_2 %>% filter(sample==TRUE)
test <- data_2 %>% filter(sample==FALSE)
#verifying the dimensions
dim(test) #test set
dim(train) #train set
model <- lm(charges~.,train)
predict_train <- predict(model,train)
predict_test <- predict(model,test)
# RMSE
RMSE(predict_test,test$charges)
# MAPE
MAPE(predict_test,test$charges)
hist(model$residuals)
summary(data_2$charges)
data(cars)
reg <- lm(log(dist) ~ log(speed), data = cars)
R2_Score(y_pred = exp(reg$fitted.values), y_true = cars$dist)
# RMSE
RMSE(predict_test,test$charges)
# MAPE
MAPE(predict_test,test$charges)
# R2 Score
R2_Score(predict_test,test$charges)
# RMSE of test
RMSE(predict_test,test$charges)
# RMSE of test
RMSE(predict_train,train$charges)
# MAPE
MAPE(predict_test,test$charges)
# R2 Score
R2_Score(predict_test,test$charges)
# RMSE of test
RMSE(predict_test,test$charges)
# RMSE of test
RMSE(predict_train,train$charges)
# MAPE
MAPE(predict_test,test$charges)
# R2 Score
R2_Score(predict_test,test$charges)
# RMSE of test
RMSE(predict_test,test$charges)
# RMSE of train
RMSE(predict_train,train$charges)
# MAPE
MAPE(predict_test,test$charges)
# R2 Score
R2_Score(predict_test,test$charges)
# RMSE of test
RMSE(predict_test,test$charges)
# RMSE of train
RMSE(predict_train,train$charges)
# R2 Score
R2_Score(predict_test,test$charges)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(reshape2)
library(caTools)
library(corrplot)
library(MLmetrics)
data_0 <- read.csv("insurance.csv", stringsAsFactors = TRUE) #converting all strings to factors
#peeping into data
head(data_0)
# dimension of the dataset
dim(data_0)
# structure of the dataset
str(data_0)
summary(data_0)
null_cols <- colSums(is.na(data_0))/nrow(data_0)*100
null_cols[null_cols!=0]
box_dist <- function(x,y){
#` a custom function to plot histogram and box plot for a column
print(x %>% ggplot(aes_string(y))+geom_boxplot())
print(x %>% ggplot(aes_string(y))+geom_histogram(fill="orange", color="black"))
}
box_dist(data_0,"age")
data_0 %>% ggplot(aes(age,charges))+geom_point()+geom_smooth()
data_0 %>% ggplot(aes(age))+geom_histogram(aes(fill=sex),position = "dodge")
#checking if a particular region causes this rise
data_0 %>% filter(age>40) %>%  group_by(region) %>% summarise(table = table(sex))
# lets check if bmi is cause for this increase
data_1 <- data_0 #to not tamper original data
# converting bmi's to categories
data_1$bmi <- cut(data_1$bmi, breaks = c(-Inf,24.9,30,Inf), labels = c("healthy","overweight","obese"))
data_1 %>% filter(age<40) %>% group_by(bmi) %>% summarize(table=table(sex))
data_0 %>% ggplot(aes(age,charges)) + geom_point(aes(color=charges>50000))
data_0 %>% ggplot(aes(age,bmi)) + geom_point(aes(color=bmi>24.9))# bmi <24.9 is overweight <30 is obese
data_0 %>% ggplot(aes(age,bmi)) + geom_point(aes(color=smoker))
data_0 %>% ggplot(aes(age))+geom_histogram(aes(fill=region),position = "dodge")
box_dist(data_0,"bmi")
data_0 %>% ggplot(aes(bmi,charges))+geom_point()+geom_smooth()
data_0 %>% ggplot(aes(bmi,charges))+geom_point(aes(color=region)) #outliers seem to be above bmi of 47 in above boxplot
# removing outliers in bmi
data_2 <- data_0 %>% filter(!bmi>47) #not tampering original data
# no. of rows removed
nrow(data_0)-nrow(data_2)
data_2 %>% ggplot(aes(bmi))+geom_histogram(aes(fill=region),color="black")+facet_wrap(~region)
box_dist(data_0,"children")
data_2 %>% ggplot(aes(children))+geom_histogram(aes(fill=region),position = "dodge")
data_2 %>% ggplot(aes(charges))+geom_boxplot(aes(fill=region))
data_2 %>% ggplot(aes(smoker))+geom_bar(aes(fill=region),position = "dodge")+facet_wrap(~sex)
data_2 %>% ggplot(aes(children,charges))+geom_point()+geom_smooth()
data_2 <- data_2 %>% select(!children)
# getting the indexes of all numerical columns
num_idx <- which(!grepl("factor|character",sapply(data_2,class)))
M <- cor(data_2[num_idx])
corrplot(M,method = "num",type = "lower")
sample <- sample.split(data_2$charges,.7)
train <- data_2 %>% filter(sample==TRUE)
test <- data_2 %>% filter(sample==FALSE)
#verifying the dimensions
dim(test) #test set
dim(train) #train set
model <- lm(charges~.,train)
predict_train <- predict(model,train)
predict_test <- predict(model,test)
# RMSE of test
RMSE(predict_test,test$charges)
# RMSE of train
RMSE(predict_train,train$charges)
# R2 Score
R2_Score(predict_test,test$charges)
# RMSE of test
RMSE(predict_test,test$charges)
# RMSE of train
RMSE(predict_train,train$charges)
#MAPE of test
MAPE(predict_train,train$charges)
# R2 Score
R2_Score(predict_test,test$charges)
# RMSE of test
RMSE(predict_test,test$charges)
# RMSE of train
RMSE(predict_train,train$charges)
# R2 Score
R2_Score(predict_test,test$charges)
install.packages("tm")
install.packages("wordcloud2")
remove.packages("wordcloud", lib="~/R/win-library/4.1")
install.packages("RColorBrewer")
#install.packages("tm")
library("tm")
#install.packages("SnowballC")
library("SnowballC")
#install.packages("wordcloud2")
library("wordcloud2")
#install.packages("RColorBrewer")
library("RColorBrewer")
text=readLines(textdata.txt)
text=readLines("textdata.txt")
wordcloud2(words=d$word,freq =d$freq,min.freq = 1,max.words = 200,random.order = FALSE,rot.per = 0.35,colors=brewer.pal(8,"Dark2"))
docs=Corpus(VectorSource(text))
docs=tm_map(docs,content_transformer(tolower))
docs=tm_map(docs,removeNumbers)
docs=tm_map(docs,removeWords,stopwords("english"))
###
docs=tm_map(docs,removePunctuation)
docs=tm_map(docs,stripWhitespace)
dtm=TermDocumentMatrix(docs)
m=as.matrix(dtm)
v=sort(rowSums(m),decreasing = TRUE)
d=data.frame(word=names(v),freq=v)
head(d,10)
set.seed(1234)
wordcloud2(words=d$word,freq =d$freq,min.freq = 1,max.words = 200,random.order = FALSE,rot.per = 0.35,colors=brewer.pal(8,"Dark2"))
#wordcloud2(words=d$word,freq =d$freq,min.freq = 1,max.words = 200,random.order = FALSE,rot.per = 0.35,colors=brewer.pal(8,"Dark2"))
wordcloud2(d,shape="star")
#wordcloud2(words=d$word,freq =d$freq,min.freq = 1,max.words = 200,random.order = FALSE,rot.per = 0.35,colors=brewer.pal(8,"Dark2"))
wordcloud2(d,shape="square")
#wordcloud2(words=d$word,freq =d$freq,min.freq = 1,max.words = 200,random.order = FALSE,rot.per = 0.35,colors=brewer.pal(8,"Dark2"))
wordcloud2(d,shape="rectangle")
View(d)
View(docs)
View(dtm)
View(m)
View(d)
View(docs)
View(dtm)
View(docs)
View(m)
data_0 <- read.csv("titanic.csv")
View(data_0)
null_cols <- colSums(is.na(data_0))/nrow(data_0)*100
null_cols[null_cols!=0]
data_0 <- read.csv("titanic.csv",na.strings = "NA")
View(data_0)
#dropping the columns cabin,name,passenid,fare,ticket
summary(data_0)
data_2 <- data_0 %>% select(!c(Cabin,Name,PassengerId,Fare,Ticket))
data_2 <- data_0 %>% select(!c(Cabin,Name,PassengerId,Fare,Ticket))
library(tidyverse)
data_2 <- data_0 %>% select(!c(Cabin,Name,PassengerId,Fare,Ticket))
#checking for missing values and their %
null_cols <- colSums(is.na(data_0))/nrow(data_0)*100
null_cols[null_cols!=0]
#dropping the columns cabin,name,passenid,fare,ticket
summary(data_0)
data_2 <- data_0 %>% select(!c(Cabin,Name,PassengerId,Fare,Ticket))
data_2[is.na(data_2)] <- mean(data_2$Age,na.rm = TRUE)
View(data_2)
data_0 <- read.csv("titanic.csv",stringsAsFactors = TRUE)
#checking for missing values and their %
null_cols <- colSums(is.na(data_0))/nrow(data_0)*100
null_cols[null_cols!=0]
#dropping the columns cabin,name,passenid,fare,ticket
summary(data_0)
#dropping the columns cabin,name,passenid,fare,ticket
summary(data_0)
data_2 <- data_0 %>% select(!c(Cabin,Name,PassengerId,Fare,Ticket))
data_2[is.na(data_2)] <- mean(data_2$Age,na.rm = TRUE)
library(caTools)
#train test split
sample <- sample.split(data_2$Survived,.7)
sample <- sample.split(data_2$Survived,.7)
train <- data_2 %>% filter(sample==TRUE)
test <- data_2 %>% filter(sample==FALSE)
data_0 <- read.csv("titanic.csv",stringsAsFactors = TRUE, na.strings = c(""," ","NA"))
View(data_0)
#checking for missing values and their %
null_cols <- colSums(is.na(data_0))/nrow(data_0)*100
null_cols[null_cols!=0]
rm(data_2)
#dropping the columns cabin,name,passenid,fare,ticket
summary(data_0)
data_1 <- data_0 %>% select(!c(Cabin,Name,PassengerId,Fare,Ticket))
data_1[is.na(data_1)] <- mean(data_1$Age,na.rm = TRUE)
View(data_1)
#checking for missing values and their %
null_cols <- colSums(is.na(data_0))/nrow(data_0)*100
null_cols[null_cols!=0]
#checking for missing values and their %
null_cols <- colSums(is.na(data_1))/nrow(data_1)*100
null_cols[null_cols!=0]
summary(data_1$Embarked)
data_0 <- read.csv("titanic.csv",stringsAsFactors = TRUE, na.strings = c(""," ","NA"))
data_1 <- data_0 %>% select(!c(Cabin,Name,PassengerId,Fare,Ticket))
data_1$Age[is.na(data_1$Age)] <- mean(data_1$Age,na.rm = TRUE)
summary(data_1$Embarked)
data_1$Embarked[is.na(data_1$Embarked)] <- "S"
#checking for missing values and their %
null_cols <- colSums(is.na(data_1))/nrow(data_1)*100
null_cols[null_cols!=0]
#train test split
sample <- sample.split(data_2$Survived,.7)
train <- data_2 %>% filter(sample==TRUE)
test <- data_2 %>% filter(sample==FALSE)
#train test split
sample <- sample.split(data_1$Survived,.7)
train <- data_1 %>% filter(sample==TRUE)
test <- data_1 %>% filter(sample==FALSE)
library(MLmetrics)
#train test split
sample <- sample.split(data_1$Survived,.8)
train <- data_1 %>% filter(sample==TRUE)
test <- data_1 %>% filter(sample==FALSE)
#logistic regression
model <- glm(Survived~.,train,family = binomial())
#apply the model on test
test$predict <- predict(model,test[-1])
test$predict
#apply the model on test
#test$predict <- predict(model,test[-1]) #predictions are negative and greater than one
test$predict <- predict(model,test[-1],type = "response")
test$predict
#apply the model on test
#test$predict <- predict(model,test[-1]) #predictions are negative and greater than one
test$predict_prob <- predict(model,test[-1],type = "response")
test$predict <- ifelse(test$predict_prob>.5,1,0)
View(test)
ConfusionMatrix(test$predict,test$Survived)
Recall(test$Survived,test$predict)
Recall(test$Survived,test$predict,positive = "1")
Recall(test$Survived,test$predict,positive = '1')
Precision(test$Survived,test$predict,positive = '1')
ConfusionMatrix(test$predict,test$Survived)
F1_Score(test$Survived,test$predict,positive = '1')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(reshape2)
library(caTools)
library(corrplot)
library(MLmetrics)
library(ggfortify)
data_0 <- read.csv("insurance.csv", stringsAsFactors = TRUE) #converting all strings to factors
#peeping into data
head(data_0)
# dimension of the dataset
dim(data_0)
# structure of the dataset
str(data_0)
summary(data_0)
null_cols <- colSums(is.na(data_0))/nrow(data_0)*100
null_cols[null_cols!=0]
box_dist <- function(x,y){
#` a custom function to plot histogram and box plot for a column
print(x %>% ggplot(aes_string(y))+geom_boxplot())
print(x %>% ggplot(aes_string(y))+geom_histogram(fill="orange", color="black"))
}
box_dist(data_0,"age")
data_0 %>% ggplot(aes(age,charges))+geom_point()+geom_smooth(method="lm")
data_0 %>% ggplot(aes(age))+geom_histogram(aes(fill=sex),position = "dodge")
#checking if a particular region causes this rise
data_0 %>% filter(age>40) %>%  group_by(region) %>% summarise(table = table(sex))
# lets check if bmi is cause for this increase
data_1 <- data_0 #to not tamper original data
# converting bmi's to categories
data_1$bmi <- cut(data_1$bmi, breaks = c(-Inf,24.9,30,Inf), labels = c("healthy","overweight","obese"))
data_1 %>% filter(age<40) %>% group_by(bmi) %>% summarize(table=table(sex))
data_0 %>% ggplot(aes(age,charges)) + geom_point(aes(color=charges>50000))
data_0 %>% ggplot(aes(age,bmi)) + geom_point(aes(color=bmi>24.9))# bmi <24.9 is overweight <30 is obese
data_0 %>% ggplot(aes(age,bmi)) + geom_point(aes(color=smoker))
data_0 %>% ggplot(aes(age))+geom_histogram(aes(fill=region),position = "dodge")
box_dist(data_0,"bmi")
data_0 %>% ggplot(aes(bmi,charges))+geom_point()+geom_smooth(method="lm")
data_0 %>% ggplot(aes(bmi,charges))+geom_point(aes(color=region)) #outliers seem to be above bmi of 47 in above boxplot
# removing outliers in bmi
data_2 <- data_0 %>% filter(!bmi>47) #not tampering original data
# no. of rows removed
nrow(data_0)-nrow(data_2)
data_2 %>% ggplot(aes(bmi))+geom_histogram(aes(fill=region),color="black")+facet_wrap(~region)
box_dist(data_0,"children")
data_2 %>% ggplot(aes(children))+geom_histogram(aes(fill=region),position = "dodge")
data_2 %>% ggplot(aes(charges))+geom_boxplot(aes(fill=region))
data_2 %>% ggplot(aes(smoker))+geom_bar(aes(fill=region),position = "dodge")+facet_wrap(~sex)
data_2 %>% ggplot(aes(children,charges))+geom_point()+geom_smooth(method="lm")
data_2 %>% ggplot(aes(charges))+geom_boxplot()
data_2 %>% ggplot(aes(log10(charges)))+geom_density()
data_2 %>% ggplot(aes(log(charges)))+geom_boxplot()
# getting the indexes of all numerical columns
num_idx <- which(!grepl("factor|character",sapply(data_2,class)))
M <- cor(data_2[num_idx])
corrplot(M,method = "num",type = "lower")
data_2$bmi <- scale(data_2$bmi)
x <- data_2$bmi
x <- (x-min(x))/(max(x)-min(x))
#x <- data_2$charges
#x <- (x-min(x))/(max(x)-min(x))
data_2 %>% ggplot(aes(charges))+geom_density()
data_2 %>% ggplot(aes(log(charges)))+geom_density()
#data_2$charges <- log(data_2$charges)
sample <- sample.split(data_2$charges,.7)
train <- data_2 %>% filter(sample==TRUE)
test <- data_2 %>% filter(sample==FALSE)
#verifying the dimensions
dim(test) #test set
dim(train) #train set
model <- lm(charges~.,train)
predict_train <- predict(model,train)
predict_test <- predict(model,test)
summary(model)
# RMSE of test
RMSE(predict_test,test$charges)
# RMSE of train
RMSE(predict_train,train$charges)
# R2 Score
R2_Score(predict_test,test$charges)
knitr::opts_chunk$set(echo = TRUE)
names(data_2)
data_2$bmi <- scale(data_2$bmi)
x <- data_2$bmi
x <- (x-min(x))/(max(x)-min(x))
#x <- data_2$charges
#x <- (x-min(x))/(max(x)-min(x))
data_2 %>% ggplot(aes(charges))+geom_density()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(reshape2)
library(caTools)
library(corrplot)
library(MLmetrics)
library(ggfortify)
data_0 <- read.csv("insurance.csv", stringsAsFactors = TRUE) #converting all strings to factors
#peeping into data
head(data_0)
# dimension of the dataset
dim(data_0)
# structure of the dataset
str(data_0)
summary(data_0)
null_cols <- colSums(is.na(data_0))/nrow(data_0)*100
null_cols[null_cols!=0]
box_dist <- function(x,y){
#` a custom function to plot histogram and box plot for a column
print(x %>% ggplot(aes_string(y))+geom_boxplot())
print(x %>% ggplot(aes_string(y))+geom_histogram(fill="orange", color="black"))
}
box_dist(data_0,"age")
data_0 %>% ggplot(aes(age,charges))+geom_point()+geom_smooth(method="lm")
data_0 %>% ggplot(aes(age))+geom_histogram(aes(fill=sex),position = "dodge")
#checking if a particular region causes this rise
data_0 %>% filter(age>40) %>%  group_by(region) %>% summarise(table = table(sex))
# lets check if bmi is cause for this increase
data_1 <- data_0 #to not tamper original data
# converting bmi's to categories
data_1$bmi <- cut(data_1$bmi, breaks = c(-Inf,24.9,30,Inf), labels = c("healthy","overweight","obese"))
data_1 %>% filter(age<40) %>% group_by(bmi) %>% summarize(table=table(sex))
data_0 %>% ggplot(aes(age,charges)) + geom_point(aes(color=charges>50000))
data_0 %>% ggplot(aes(age,bmi)) + geom_point(aes(color=bmi>24.9))# bmi <24.9 is overweight <30 is obese
data_0 %>% ggplot(aes(age,bmi)) + geom_point(aes(color=smoker))
data_0 %>% ggplot(aes(age))+geom_histogram(aes(fill=region),position = "dodge")
box_dist(data_0,"bmi")
data_0 %>% ggplot(aes(bmi,charges))+geom_point()+geom_smooth(method="lm")
data_0 %>% ggplot(aes(bmi,charges))+geom_point(aes(color=region)) #outliers seem to be above bmi of 47 in above boxplot
# removing outliers in bmi
data_2 <- data_0 %>% filter(!bmi>47) #not tampering original data
# no. of rows removed
nrow(data_0)-nrow(data_2)
data_2 %>% ggplot(aes(bmi))+geom_histogram(aes(fill=region),color="black")+facet_wrap(~region)
box_dist(data_0,"children")
data_2 %>% ggplot(aes(children))+geom_histogram(aes(fill=region),position = "dodge")
data_2 %>% ggplot(aes(charges))+geom_boxplot(aes(fill=region))
data_2 %>% ggplot(aes(smoker))+geom_bar(aes(fill=region),position = "dodge")+facet_wrap(~sex)
data_2 %>% ggplot(aes(children,charges))+geom_point()+geom_smooth(method="lm")
data_2 %>% ggplot(aes(charges))+geom_boxplot()
data_2 %>% ggplot(aes(log10(charges)))+geom_density()
data_2 %>% ggplot(aes(log(charges)))+geom_boxplot()
# getting the indexes of all numerical columns
num_idx <- which(!grepl("factor|character",sapply(data_2,class)))
M <- cor(data_2[num_idx])
corrplot(M,method = "num",type = "lower")
names(data_2)
data_2$bmi <- scale(data_2$bmi)
x <- data_2$bmi
x <- (x-min(x))/(max(x)-min(x))
#x <- data_2$charges
#x <- (x-min(x))/(max(x)-min(x))
data_2 %>% ggplot(aes(charges))+geom_density()
data_2 %>% ggplot(aes(log(charges)))+geom_density()
#data_2$charges <- log(data_2$charges)
sample <- sample.split(data_2$charges,.7)
train <- data_2 %>% filter(sample==TRUE)
test <- data_2 %>% filter(sample==FALSE)
#verifying the dimensions
dim(test) #test set
dim(train) #train set
model <- lm(charges~.,train)
predict_train <- predict(model,train)
predict_test <- predict(model,test)
summary(model)
# RMSE of test
RMSE(predict_test,test$charges)
# RMSE of train
RMSE(predict_train,train$charges)
# R2 Score
R2_Score(predict_test,test$charges)
autoplot(model)
data_0 <- read.csv("Kmeans data.csv")
library(tidyverse)
library(caTools)
View(data_0)
help("kmeans")
for(i in 1:10){
print(i)
}
wcss <- vector()
for(i in 1:10){
wcss[i] <- sum(kmeans(data_0,i)$withinss)
}
kmeans(data_0,2)$withinss
kmeans(data_0,2)#$withinss
data_0 <- read.csv("Kmeans data.csv",stringsAsFactors = TRUE)
kmeans(data_0,2)#$withinss
x <- kmeans(data_0,2)#$withinss
wcss <- vector()
for(i in 1:10){
wcss[i] <- sum(kmeans(data_0,i)$withinss)
}
data_0 <- read.csv("Kmeans data.csv",stringsAsFactors = TRUE)
data <- data_0[c(4,5)]
for(i in 1:10){
wcss[i] <- sum(kmeans(data,i)$withinss)
}
plot(1:10,wcss,type="p",xlab = "No. of clusters", ylab = "WCSS")
plot(1:10,wcss,type="l",xlab = "No. of clusters", ylab = "WCSS")
plot(1:10,wcss,type=c("l","p"),xlab = "No. of clusters", ylab = "WCSS")
plot(1:10,wcss,type="b",xlab = "No. of clusters", ylab = "WCSS")
km <- kmeans(data,5,iter.max = 1000)
cluster_no <- km$cluster
data_0$cluster_no <- cluster_no
View(data_0)
install.packages("cluster")
library(cluster)
clusplot(data_0,km$cluster,lines = 2, shade = TRUE, color = TRUE,labels= 0)
clusplot(data_0,km$cluster,lines = 2, shade = TRUE, color = TRUE,labels= 0, xlab = "Income",ylab = "Spenfing Score")
clusplot(data_0,km$cluster,lines = 2, shade = TRUE, color = TRUE,labels= 0, xlab = "Income",ylab = "Spending Score")
clusplot(data_0,km$cluster,lines = 2, shade = TRUE, color = TRUE,labels= 2, xlab = "Income",ylab = "Spending Score")
customers <- data_0 %>% filter(cluster_no==4)
View(customers)
getwd()
setwd("C:/Users/91903/Desktop/Projects/Linear Regression")
